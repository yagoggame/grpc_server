// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/yagoggame/grpc_server (interfaces: Authorizator,Pooler,GameManager,GameGeter)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	game "github.com/yagoggame/gomaster/game"
	server "github.com/yagoggame/grpc_server"
)

// MockAuthorizator is a mock of Authorizator interface
type MockAuthorizator struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizatorMockRecorder
}

// MockAuthorizatorMockRecorder is the mock recorder for MockAuthorizator
type MockAuthorizatorMockRecorder struct {
	mock *MockAuthorizator
}

// NewMockAuthorizator creates a new mock instance
func NewMockAuthorizator(ctrl *gomock.Controller) *MockAuthorizator {
	mock := &MockAuthorizator{ctrl: ctrl}
	mock.recorder = &MockAuthorizatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthorizator) EXPECT() *MockAuthorizatorMockRecorder {
	return m.recorder
}

// Authorize mocks base method
func (m *MockAuthorizator) Authorize(arg0 *server.Requisites) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize
func (mr *MockAuthorizatorMockRecorder) Authorize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockAuthorizator)(nil).Authorize), arg0)
}

// ChangeRequisites mocks base method
func (m *MockAuthorizator) ChangeRequisites(arg0, arg1 *server.Requisites) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeRequisites", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeRequisites indicates an expected call of ChangeRequisites
func (mr *MockAuthorizatorMockRecorder) ChangeRequisites(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeRequisites", reflect.TypeOf((*MockAuthorizator)(nil).ChangeRequisites), arg0, arg1)
}

// Register mocks base method
func (m *MockAuthorizator) Register(arg0 *server.Requisites) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockAuthorizatorMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthorizator)(nil).Register), arg0)
}

// Remove mocks base method
func (m *MockAuthorizator) Remove(arg0 *server.Requisites) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Remove indicates an expected call of Remove
func (mr *MockAuthorizatorMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockAuthorizator)(nil).Remove), arg0)
}

// MockPooler is a mock of Pooler interface
type MockPooler struct {
	ctrl     *gomock.Controller
	recorder *MockPoolerMockRecorder
}

// MockPoolerMockRecorder is the mock recorder for MockPooler
type MockPoolerMockRecorder struct {
	mock *MockPooler
}

// NewMockPooler creates a new mock instance
func NewMockPooler(ctrl *gomock.Controller) *MockPooler {
	mock := &MockPooler{ctrl: ctrl}
	mock.recorder = &MockPoolerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPooler) EXPECT() *MockPoolerMockRecorder {
	return m.recorder
}

// AddGamer mocks base method
func (m *MockPooler) AddGamer(arg0 *game.Gamer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGamer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddGamer indicates an expected call of AddGamer
func (mr *MockPoolerMockRecorder) AddGamer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGamer", reflect.TypeOf((*MockPooler)(nil).AddGamer), arg0)
}

// GetGamer mocks base method
func (m *MockPooler) GetGamer(arg0 int) (*game.Gamer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGamer", arg0)
	ret0, _ := ret[0].(*game.Gamer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGamer indicates an expected call of GetGamer
func (mr *MockPoolerMockRecorder) GetGamer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGamer", reflect.TypeOf((*MockPooler)(nil).GetGamer), arg0)
}

// JoinGame mocks base method
func (m *MockPooler) JoinGame(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinGame", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// JoinGame indicates an expected call of JoinGame
func (mr *MockPoolerMockRecorder) JoinGame(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinGame", reflect.TypeOf((*MockPooler)(nil).JoinGame), arg0)
}

// Release mocks base method
func (m *MockPooler) Release() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release")
}

// Release indicates an expected call of Release
func (mr *MockPoolerMockRecorder) Release() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockPooler)(nil).Release))
}

// ReleaseGame mocks base method
func (m *MockPooler) ReleaseGame(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseGame", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseGame indicates an expected call of ReleaseGame
func (mr *MockPoolerMockRecorder) ReleaseGame(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseGame", reflect.TypeOf((*MockPooler)(nil).ReleaseGame), arg0)
}

// RmGamer mocks base method
func (m *MockPooler) RmGamer(arg0 int) (*game.Gamer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RmGamer", arg0)
	ret0, _ := ret[0].(*game.Gamer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RmGamer indicates an expected call of RmGamer
func (mr *MockPoolerMockRecorder) RmGamer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RmGamer", reflect.TypeOf((*MockPooler)(nil).RmGamer), arg0)
}

// MockGameManager is a mock of GameManager interface
type MockGameManager struct {
	ctrl     *gomock.Controller
	recorder *MockGameManagerMockRecorder
}

// MockGameManagerMockRecorder is the mock recorder for MockGameManager
type MockGameManagerMockRecorder struct {
	mock *MockGameManager
}

// NewMockGameManager creates a new mock instance
func NewMockGameManager(ctrl *gomock.Controller) *MockGameManager {
	mock := &MockGameManager{ctrl: ctrl}
	mock.recorder = &MockGameManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGameManager) EXPECT() *MockGameManagerMockRecorder {
	return m.recorder
}

// MakeTurn mocks base method
func (m *MockGameManager) MakeTurn(arg0 int, arg1 *game.TurnData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeTurn", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeTurn indicates an expected call of MakeTurn
func (mr *MockGameManagerMockRecorder) MakeTurn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeTurn", reflect.TypeOf((*MockGameManager)(nil).MakeTurn), arg0, arg1)
}

// WaitBegin mocks base method
func (m *MockGameManager) WaitBegin(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitBegin", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitBegin indicates an expected call of WaitBegin
func (mr *MockGameManagerMockRecorder) WaitBegin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitBegin", reflect.TypeOf((*MockGameManager)(nil).WaitBegin), arg0, arg1)
}

// WaitTurn mocks base method
func (m *MockGameManager) WaitTurn(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitTurn", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitTurn indicates an expected call of WaitTurn
func (mr *MockGameManagerMockRecorder) WaitTurn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitTurn", reflect.TypeOf((*MockGameManager)(nil).WaitTurn), arg0, arg1)
}

// MockGameGeter is a mock of GameGeter interface
type MockGameGeter struct {
	ctrl     *gomock.Controller
	recorder *MockGameGeterMockRecorder
}

// MockGameGeterMockRecorder is the mock recorder for MockGameGeter
type MockGameGeterMockRecorder struct {
	mock *MockGameGeter
}

// NewMockGameGeter creates a new mock instance
func NewMockGameGeter(ctrl *gomock.Controller) *MockGameGeter {
	mock := &MockGameGeter{ctrl: ctrl}
	mock.recorder = &MockGameGeterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGameGeter) EXPECT() *MockGameGeterMockRecorder {
	return m.recorder
}

// GetGame mocks base method
func (m *MockGameGeter) GetGame(arg0 int) (server.GameManager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGame", arg0)
	ret0, _ := ret[0].(server.GameManager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGame indicates an expected call of GetGame
func (mr *MockGameGeterMockRecorder) GetGame(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGame", reflect.TypeOf((*MockGameGeter)(nil).GetGame), arg0)
}
